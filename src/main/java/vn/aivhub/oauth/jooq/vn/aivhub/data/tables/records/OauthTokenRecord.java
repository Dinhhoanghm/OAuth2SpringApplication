/*
 * This file is generated by jOOQ.
 */
package vn.aivhub.data.tables.records;


import java.time.LocalDateTime;

import org.jooq.Field;
import org.jooq.Record1;
import org.jooq.Record6;
import org.jooq.Row6;
import org.jooq.impl.UpdatableRecordImpl;

import vn.aivhub.data.tables.OauthToken;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class OauthTokenRecord extends UpdatableRecordImpl<OauthTokenRecord> implements Record6<Integer, String, String, Integer, LocalDateTime, LocalDateTime> {

    private static final long serialVersionUID = 1L;

    /**
     * Setter for <code>public.oauth_token.id</code>.
     */
    public OauthTokenRecord setId(Integer value) {
        set(0, value);
        return this;
    }

    /**
     * Getter for <code>public.oauth_token.id</code>.
     */
    public Integer getId() {
        return (Integer) get(0);
    }

    /**
     * Setter for <code>public.oauth_token.refresh_token</code>.
     */
    public OauthTokenRecord setRefreshToken(String value) {
        set(1, value);
        return this;
    }

    /**
     * Getter for <code>public.oauth_token.refresh_token</code>.
     */
    public String getRefreshToken() {
        return (String) get(1);
    }

    /**
     * Setter for <code>public.oauth_token.access_token</code>.
     */
    public OauthTokenRecord setAccessToken(String value) {
        set(2, value);
        return this;
    }

    /**
     * Getter for <code>public.oauth_token.access_token</code>.
     */
    public String getAccessToken() {
        return (String) get(2);
    }

    /**
     * Setter for <code>public.oauth_token.user_id</code>.
     */
    public OauthTokenRecord setUserId(Integer value) {
        set(3, value);
        return this;
    }

    /**
     * Getter for <code>public.oauth_token.user_id</code>.
     */
    public Integer getUserId() {
        return (Integer) get(3);
    }

    /**
     * Setter for <code>public.oauth_token.access_expiration_time</code>.
     */
    public OauthTokenRecord setAccessExpirationTime(LocalDateTime value) {
        set(4, value);
        return this;
    }

    /**
     * Getter for <code>public.oauth_token.access_expiration_time</code>.
     */
    public LocalDateTime getAccessExpirationTime() {
        return (LocalDateTime) get(4);
    }

    /**
     * Setter for <code>public.oauth_token.refresh_expiration_time</code>.
     */
    public OauthTokenRecord setRefreshExpirationTime(LocalDateTime value) {
        set(5, value);
        return this;
    }

    /**
     * Getter for <code>public.oauth_token.refresh_expiration_time</code>.
     */
    public LocalDateTime getRefreshExpirationTime() {
        return (LocalDateTime) get(5);
    }

    // -------------------------------------------------------------------------
    // Primary key information
    // -------------------------------------------------------------------------

    @Override
    public Record1<Integer> key() {
        return (Record1) super.key();
    }

    // -------------------------------------------------------------------------
    // Record6 type implementation
    // -------------------------------------------------------------------------

    @Override
    public Row6<Integer, String, String, Integer, LocalDateTime, LocalDateTime> fieldsRow() {
        return (Row6) super.fieldsRow();
    }

    @Override
    public Row6<Integer, String, String, Integer, LocalDateTime, LocalDateTime> valuesRow() {
        return (Row6) super.valuesRow();
    }

    @Override
    public Field<Integer> field1() {
        return OauthToken.ID;
    }

    @Override
    public Field<String> field2() {
        return OauthToken.REFRESH_TOKEN;
    }

    @Override
    public Field<String> field3() {
        return OauthToken.ACCESS_TOKEN;
    }

    @Override
    public Field<Integer> field4() {
        return OauthToken.USER_ID;
    }

    @Override
    public Field<LocalDateTime> field5() {
        return OauthToken.ACCESS_EXPIRATION_TIME;
    }

    @Override
    public Field<LocalDateTime> field6() {
        return OauthToken.REFRESH_EXPIRATION_TIME;
    }

    @Override
    public Integer component1() {
        return getId();
    }

    @Override
    public String component2() {
        return getRefreshToken();
    }

    @Override
    public String component3() {
        return getAccessToken();
    }

    @Override
    public Integer component4() {
        return getUserId();
    }

    @Override
    public LocalDateTime component5() {
        return getAccessExpirationTime();
    }

    @Override
    public LocalDateTime component6() {
        return getRefreshExpirationTime();
    }

    @Override
    public Integer value1() {
        return getId();
    }

    @Override
    public String value2() {
        return getRefreshToken();
    }

    @Override
    public String value3() {
        return getAccessToken();
    }

    @Override
    public Integer value4() {
        return getUserId();
    }

    @Override
    public LocalDateTime value5() {
        return getAccessExpirationTime();
    }

    @Override
    public LocalDateTime value6() {
        return getRefreshExpirationTime();
    }

    @Override
    public OauthTokenRecord value1(Integer value) {
        setId(value);
        return this;
    }

    @Override
    public OauthTokenRecord value2(String value) {
        setRefreshToken(value);
        return this;
    }

    @Override
    public OauthTokenRecord value3(String value) {
        setAccessToken(value);
        return this;
    }

    @Override
    public OauthTokenRecord value4(Integer value) {
        setUserId(value);
        return this;
    }

    @Override
    public OauthTokenRecord value5(LocalDateTime value) {
        setAccessExpirationTime(value);
        return this;
    }

    @Override
    public OauthTokenRecord value6(LocalDateTime value) {
        setRefreshExpirationTime(value);
        return this;
    }

    @Override
    public OauthTokenRecord values(Integer value1, String value2, String value3, Integer value4, LocalDateTime value5, LocalDateTime value6) {
        value1(value1);
        value2(value2);
        value3(value3);
        value4(value4);
        value5(value5);
        value6(value6);
        return this;
    }

    // -------------------------------------------------------------------------
    // Constructors
    // -------------------------------------------------------------------------

    /**
     * Create a detached OauthTokenRecord
     */
    public OauthTokenRecord() {
        super(OauthToken.OAUTH_TOKEN);
    }

    /**
     * Create a detached, initialised OauthTokenRecord
     */
    public OauthTokenRecord(Integer id, String refreshToken, String accessToken, Integer userId, LocalDateTime accessExpirationTime, LocalDateTime refreshExpirationTime) {
        super(OauthToken.OAUTH_TOKEN);

        setId(id);
        setRefreshToken(refreshToken);
        setAccessToken(accessToken);
        setUserId(userId);
        setAccessExpirationTime(accessExpirationTime);
        setRefreshExpirationTime(refreshExpirationTime);
    }
}
