/*
 * This file is generated by jOOQ.
 */
package vn.aivhub.data.tables;


import java.time.LocalDateTime;
import java.util.Arrays;
import java.util.List;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Identity;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Row5;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;

import vn.aivhub.data.Keys;
import vn.aivhub.data.Public;
import vn.aivhub.data.tables.records.ResetPasswordTokenRecord;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class ResetPasswordToken extends TableImpl<ResetPasswordTokenRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>public.reset_password_token</code>
     */
    public static final ResetPasswordToken RESET_PASSWORD_TOKEN = new ResetPasswordToken();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<ResetPasswordTokenRecord> getRecordType() {
        return ResetPasswordTokenRecord.class;
    }

    /**
     * The column <code>public.reset_password_token.id</code>.
     */
    public static final TableField<ResetPasswordTokenRecord, Integer> ID = createField(DSL.name("id"), SQLDataType.INTEGER.nullable(false).identity(true), RESET_PASSWORD_TOKEN, "");

    /**
     * The column <code>public.reset_password_token.user_id</code>.
     */
    public static final TableField<ResetPasswordTokenRecord, Integer> USER_ID = createField(DSL.name("user_id"), SQLDataType.INTEGER, RESET_PASSWORD_TOKEN, "");

    /**
     * The column <code>public.reset_password_token.created_at</code>.
     */
    public static final TableField<ResetPasswordTokenRecord, LocalDateTime> CREATED_AT = createField(DSL.name("created_at"), SQLDataType.LOCALDATETIME(6).defaultValue(DSL.field("now()", SQLDataType.LOCALDATETIME)), RESET_PASSWORD_TOKEN, "");

    /**
     * The column <code>public.reset_password_token.expiration_time</code>.
     */
    public static final TableField<ResetPasswordTokenRecord, LocalDateTime> EXPIRATION_TIME = createField(DSL.name("expiration_time"), SQLDataType.LOCALDATETIME(6), RESET_PASSWORD_TOKEN, "");

    /**
     * The column <code>public.reset_password_token.token</code>.
     */
    public static final TableField<ResetPasswordTokenRecord, String> TOKEN = createField(DSL.name("token"), SQLDataType.VARCHAR(200), RESET_PASSWORD_TOKEN, "");

    private ResetPasswordToken(Name alias, Table<ResetPasswordTokenRecord> aliased) {
        this(alias, aliased, null);
    }

    private ResetPasswordToken(Name alias, Table<ResetPasswordTokenRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    /**
     * No further instances allowed
     */
    private ResetPasswordToken() {
        this(DSL.name("reset_password_token"), null);
    }

    public <O extends Record> ResetPasswordToken(Table<O> child, ForeignKey<O, ResetPasswordTokenRecord> key) {
        super(child, key, RESET_PASSWORD_TOKEN);
    }

    @Override
    public Schema getSchema() {
        return Public.PUBLIC;
    }

    @Override
    public Identity<ResetPasswordTokenRecord, Integer> getIdentity() {
        return (Identity<ResetPasswordTokenRecord, Integer>) super.getIdentity();
    }

    @Override
    public UniqueKey<ResetPasswordTokenRecord> getPrimaryKey() {
        return Keys.RESET_PASSWORD_TOKEN_PK;
    }

    @Override
    public List<UniqueKey<ResetPasswordTokenRecord>> getKeys() {
        return Arrays.<UniqueKey<ResetPasswordTokenRecord>>asList(Keys.RESET_PASSWORD_TOKEN_PK);
    }

    // -------------------------------------------------------------------------
    // Row5 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row5<Integer, Integer, LocalDateTime, LocalDateTime, String> fieldsRow() {
        return (Row5) super.fieldsRow();
    }
}
