/*
 * This file is generated by jOOQ.
 */
package vn.aivhub.data.tables;


import java.util.Arrays;
import java.util.List;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Identity;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Row4;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;

import vn.aivhub.data.Keys;
import vn.aivhub.data.Public;
import vn.aivhub.data.tables.records.PlanUserRecord;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class PlanUser extends TableImpl<PlanUserRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>public.plan_user</code>
     */
    public static final PlanUser PLAN_USER = new PlanUser();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<PlanUserRecord> getRecordType() {
        return PlanUserRecord.class;
    }

    /**
     * The column <code>public.plan_user.id</code>.
     */
    public static final TableField<PlanUserRecord, Integer> ID = createField(DSL.name("id"), SQLDataType.INTEGER.nullable(false).identity(true), PLAN_USER, "");

    /**
     * The column <code>public.plan_user.user_id</code>.
     */
    public static final TableField<PlanUserRecord, Integer> USER_ID = createField(DSL.name("user_id"), SQLDataType.INTEGER, PLAN_USER, "");

    /**
     * The column <code>public.plan_user.plan_id</code>.
     */
    public static final TableField<PlanUserRecord, Integer> PLAN_ID = createField(DSL.name("plan_id"), SQLDataType.INTEGER, PLAN_USER, "");

    /**
     * The column <code>public.plan_user.status</code>.
     */
    public static final TableField<PlanUserRecord, String> STATUS = createField(DSL.name("status"), SQLDataType.VARCHAR, PLAN_USER, "");

    private PlanUser(Name alias, Table<PlanUserRecord> aliased) {
        this(alias, aliased, null);
    }

    private PlanUser(Name alias, Table<PlanUserRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    /**
     * No further instances allowed
     */
    private PlanUser() {
        this(DSL.name("plan_user"), null);
    }

    public <O extends Record> PlanUser(Table<O> child, ForeignKey<O, PlanUserRecord> key) {
        super(child, key, PLAN_USER);
    }

    @Override
    public Schema getSchema() {
        return Public.PUBLIC;
    }

    @Override
    public Identity<PlanUserRecord, Integer> getIdentity() {
        return (Identity<PlanUserRecord, Integer>) super.getIdentity();
    }

    @Override
    public UniqueKey<PlanUserRecord> getPrimaryKey() {
        return Keys.PLAN_USER_PK;
    }

    @Override
    public List<UniqueKey<PlanUserRecord>> getKeys() {
        return Arrays.<UniqueKey<PlanUserRecord>>asList(Keys.PLAN_USER_PK);
    }

    // -------------------------------------------------------------------------
    // Row4 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row4<Integer, Integer, Integer, String> fieldsRow() {
        return (Row4) super.fieldsRow();
    }
}
