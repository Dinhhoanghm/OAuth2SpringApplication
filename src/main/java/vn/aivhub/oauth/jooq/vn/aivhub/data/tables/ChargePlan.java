/*
 * This file is generated by jOOQ.
 */
package vn.aivhub.data.tables;


import java.util.Arrays;
import java.util.List;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Identity;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Row7;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;

import vn.aivhub.data.Keys;
import vn.aivhub.data.Public;
import vn.aivhub.data.tables.records.ChargePlanRecord;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class ChargePlan extends TableImpl<ChargePlanRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>public.charge_plan</code>
     */
    public static final ChargePlan CHARGE_PLAN = new ChargePlan();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<ChargePlanRecord> getRecordType() {
        return ChargePlanRecord.class;
    }

    /**
     * The column <code>public.charge_plan.id</code>.
     */
    public static final TableField<ChargePlanRecord, Integer> ID = createField(DSL.name("id"), SQLDataType.INTEGER.nullable(false).identity(true), CHARGE_PLAN, "");

    /**
     * The column <code>public.charge_plan.name</code>.
     */
    public static final TableField<ChargePlanRecord, String> NAME = createField(DSL.name("name"), SQLDataType.VARCHAR(200), CHARGE_PLAN, "");

    /**
     * The column <code>public.charge_plan.team_size</code>.
     */
    public static final TableField<ChargePlanRecord, Integer> TEAM_SIZE = createField(DSL.name("team_size"), SQLDataType.INTEGER, CHARGE_PLAN, "");

    /**
     * The column <code>public.charge_plan.project_size</code>.
     */
    public static final TableField<ChargePlanRecord, Integer> PROJECT_SIZE = createField(DSL.name("project_size"), SQLDataType.INTEGER, CHARGE_PLAN, "");

    /**
     * The column <code>public.charge_plan.storage</code>.
     */
    public static final TableField<ChargePlanRecord, Double> STORAGE = createField(DSL.name("storage"), SQLDataType.DOUBLE, CHARGE_PLAN, "");

    /**
     * The column <code>public.charge_plan.support_type</code>.
     */
    public static final TableField<ChargePlanRecord, String> SUPPORT_TYPE = createField(DSL.name("support_type"), SQLDataType.VARCHAR(200), CHARGE_PLAN, "");

    /**
     * The column <code>public.charge_plan.money</code>.
     */
    public static final TableField<ChargePlanRecord, Double> MONEY = createField(DSL.name("money"), SQLDataType.DOUBLE, CHARGE_PLAN, "");

    private ChargePlan(Name alias, Table<ChargePlanRecord> aliased) {
        this(alias, aliased, null);
    }

    private ChargePlan(Name alias, Table<ChargePlanRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    /**
     * No further instances allowed
     */
    private ChargePlan() {
        this(DSL.name("charge_plan"), null);
    }

    public <O extends Record> ChargePlan(Table<O> child, ForeignKey<O, ChargePlanRecord> key) {
        super(child, key, CHARGE_PLAN);
    }

    @Override
    public Schema getSchema() {
        return Public.PUBLIC;
    }

    @Override
    public Identity<ChargePlanRecord, Integer> getIdentity() {
        return (Identity<ChargePlanRecord, Integer>) super.getIdentity();
    }

    @Override
    public UniqueKey<ChargePlanRecord> getPrimaryKey() {
        return Keys.CHARGE_PLAN_PK;
    }

    @Override
    public List<UniqueKey<ChargePlanRecord>> getKeys() {
        return Arrays.<UniqueKey<ChargePlanRecord>>asList(Keys.CHARGE_PLAN_PK);
    }

    // -------------------------------------------------------------------------
    // Row7 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row7<Integer, String, Integer, Integer, Double, String, Double> fieldsRow() {
        return (Row7) super.fieldsRow();
    }
}
