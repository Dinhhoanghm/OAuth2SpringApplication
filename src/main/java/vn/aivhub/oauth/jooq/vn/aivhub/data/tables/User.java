/*
 * This file is generated by jOOQ.
 */
package vn.aivhub.data.tables;


import java.util.Arrays;
import java.util.List;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Identity;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Row15;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;

import vn.aivhub.data.Keys;
import vn.aivhub.data.Public;
import vn.aivhub.data.tables.records.UserRecord;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class User extends TableImpl<UserRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>public.user</code>
     */
    public static final User USER = new User();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<UserRecord> getRecordType() {
        return UserRecord.class;
    }

    /**
     * The column <code>public.user.id</code>.
     */
    public static final TableField<UserRecord, Integer> ID = createField(DSL.name("id"), SQLDataType.INTEGER.nullable(false).identity(true), USER, "");

    /**
     * The column <code>public.user.username</code>.
     */
    public static final TableField<UserRecord, String> USERNAME = createField(DSL.name("username"), SQLDataType.VARCHAR(200), USER, "");

    /**
     * The column <code>public.user.password</code>.
     */
    public static final TableField<UserRecord, String> PASSWORD = createField(DSL.name("password"), SQLDataType.VARCHAR(500), USER, "");

    /**
     * The column <code>public.user.first_name</code>.
     */
    public static final TableField<UserRecord, String> FIRST_NAME = createField(DSL.name("first_name"), SQLDataType.VARCHAR(200), USER, "");

    /**
     * The column <code>public.user.last_name</code>.
     */
    public static final TableField<UserRecord, String> LAST_NAME = createField(DSL.name("last_name"), SQLDataType.VARCHAR(100), USER, "");

    /**
     * The column <code>public.user.email</code>.
     */
    public static final TableField<UserRecord, String> EMAIL = createField(DSL.name("email"), SQLDataType.VARCHAR(200), USER, "");

    /**
     * The column <code>public.user.enabled</code>.
     */
    public static final TableField<UserRecord, Boolean> ENABLED = createField(DSL.name("enabled"), SQLDataType.BOOLEAN, USER, "");

    /**
     * The column <code>public.user.email_verified</code>.
     */
    public static final TableField<UserRecord, Boolean> EMAIL_VERIFIED = createField(DSL.name("email_verified"), SQLDataType.BOOLEAN, USER, "");

    /**
     * The column <code>public.user.role</code>. USER - ADMIN
     */
    public static final TableField<UserRecord, String> ROLE = createField(DSL.name("role"), SQLDataType.VARCHAR(100), USER, "USER - ADMIN");

    /**
     * The column <code>public.user.company</code>.
     */
    public static final TableField<UserRecord, String> COMPANY = createField(DSL.name("company"), SQLDataType.VARCHAR(200), USER, "");

    /**
     * The column <code>public.user.is_admin</code>.
     */
    public static final TableField<UserRecord, Boolean> IS_ADMIN = createField(DSL.name("is_admin"), SQLDataType.BOOLEAN, USER, "");

    /**
     * The column <code>public.user.dept</code>.
     */
    public static final TableField<UserRecord, String> DEPT = createField(DSL.name("dept"), SQLDataType.VARCHAR(200), USER, "");

    /**
     * The column <code>public.user.iat</code>.
     */
    public static final TableField<UserRecord, Integer> IAT = createField(DSL.name("iat"), SQLDataType.INTEGER, USER, "");

    /**
     * The column <code>public.user.exp</code>.
     */
    public static final TableField<UserRecord, Integer> EXP = createField(DSL.name("exp"), SQLDataType.INTEGER, USER, "");

    /**
     * The column <code>public.user.sub</code>.
     */
    public static final TableField<UserRecord, String> SUB = createField(DSL.name("sub"), SQLDataType.VARCHAR(100), USER, "");

    private User(Name alias, Table<UserRecord> aliased) {
        this(alias, aliased, null);
    }

    private User(Name alias, Table<UserRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    /**
     * No further instances allowed
     */
    private User() {
        this(DSL.name("user"), null);
    }

    public <O extends Record> User(Table<O> child, ForeignKey<O, UserRecord> key) {
        super(child, key, USER);
    }

    @Override
    public Schema getSchema() {
        return Public.PUBLIC;
    }

    @Override
    public Identity<UserRecord, Integer> getIdentity() {
        return (Identity<UserRecord, Integer>) super.getIdentity();
    }

    @Override
    public UniqueKey<UserRecord> getPrimaryKey() {
        return Keys.USER_PK;
    }

    @Override
    public List<UniqueKey<UserRecord>> getKeys() {
        return Arrays.<UniqueKey<UserRecord>>asList(Keys.USER_PK);
    }

    // -------------------------------------------------------------------------
    // Row15 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row15<Integer, String, String, String, String, String, Boolean, Boolean, String, String, Boolean, String, Integer, Integer, String> fieldsRow() {
        return (Row15) super.fieldsRow();
    }
}
